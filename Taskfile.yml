version: '3'

vars:
  PROJECT_DIR: "{{.PWD}}"
  SERVICE_NAME: co.samabbott.pluto-notebooks
  PLUTO_URL: http://localhost:1234

tasks:
  # Service Management
  start:
    desc: Start the persistent Pluto service
    cmds:
      - ./scripts/manage_service.sh start
      - echo "Pluto editor available at {{.PLUTO_URL}}"

  stop:
    desc: Stop the Pluto service
    cmds:
      - ./scripts/manage_service.sh stop

  restart:
    desc: Restart the Pluto service
    cmds:
      - ./scripts/manage_service.sh restart

  status:
    desc: Check if the Pluto service is running
    cmds:
      - ./scripts/manage_service.sh status

  # Logs
  logs:
    desc: View recent service logs
    cmds:
      - ./scripts/manage_service.sh logs

  errors:
    desc: View recent service errors
    cmds:
      - ./scripts/manage_service.sh errors

  follow-logs:
    desc: Follow live service logs
    cmds:
      - tail -f logs/stdout.log

  # Development
  open:
    desc: Open Pluto editor in browser
    cmds:
      - open {{.PLUTO_URL}}

  edit:
    desc: Start manual Pluto session
    cmds:
      - julia --project scripts/pluto_editor.jl

  # Site Generation
  generate:
    desc: Generate static site from notebooks
    cmds:
      - julia --project -e "using PlutoPages; PlutoPages.generate(input_dir=\"{{.PROJECT_DIR}}/src\", output_dir=\"{{.PROJECT_DIR}}/generated_site\", cache_dir=\"{{.PROJECT_DIR}}/.cache\")"

  # Git
  commit:
    desc: Commit notebook changes
    cmds:
      - git add src/
      - julia --project scripts/auto_commit.jl

  push:
    desc: Push changes to trigger deployment
    cmds:
      - task: commit
      - git push origin main
      - echo "Deployment triggered"

  # Maintenance
  install:
    desc: Install Julia dependencies
    cmds:
      - julia --project -e "using Pkg; Pkg.instantiate()"

  clean:
    desc: Clean generated files
    cmds:
      - rm -rf generated_site/
      - rm -rf .cache/

  # Publishing
  create:
    desc: Create new notebook folder in in-progress
    cmds:
      - |
        NOTEBOOK="{{index .CLI_ARGS 0}}"
        if [ -z "$NOTEBOOK" ]; then
          echo "Error: Please specify notebook folder name: task create <folder-name>"
          exit 1
        fi
        if [ -d "src/in-progress/$NOTEBOOK" ]; then
          echo "Error: Notebook folder src/in-progress/$NOTEBOOK already exists"
          exit 1
        fi
        echo "Creating notebook folder: $NOTEBOOK"
        mkdir -p "src/in-progress/$NOTEBOOK"
        touch "src/in-progress/$NOTEBOOK/$NOTEBOOK.jl"
        echo "Created src/in-progress/$NOTEBOOK/$NOTEBOOK.jl"
        echo "You can now work on your notebook in the in-progress folder"

  publish:
    desc: Move notebook folder from in-progress to src and commit
    cmds:
      - |
        NOTEBOOK="{{index .CLI_ARGS 0}}"
        if [ -z "$NOTEBOOK" ]; then
          echo "Error: Please specify notebook folder name: task publish <folder-name>"
          exit 1
        fi
        if [ ! -d "src/in-progress/$NOTEBOOK" ]; then
          echo "Error: Notebook folder src/in-progress/$NOTEBOOK does not exist"
          exit 1
        fi
        if [ -d "src/$NOTEBOOK" ]; then
          echo "Error: Notebook folder src/$NOTEBOOK already exists"
          exit 1
        fi
        echo "Moving $NOTEBOOK from in-progress to src..."
        mv "src/in-progress/$NOTEBOOK" "src/$NOTEBOOK"
        git add "src/$NOTEBOOK"
      - task: push
      - echo "Published $NOTEBOOK successfully"

  # Health Check
  health:
    desc: Check system health
    cmds:
      - echo "=== Service Status ==="
      - task: status
      - echo "=== Port Check ==="
      - lsof -i :1234 || echo "Port 1234 not in use"

  info:
    desc: Show system information
    cmds:
      - echo "Project{{":"}} {{.PROJECT_DIR}}"
      - echo "Pluto URL{{":"}} {{.PLUTO_URL}}"
      - echo "Service{{":"}} {{.SERVICE_NAME}}"

  default:
    desc: Show available tasks
    cmds:
      - task --list-all